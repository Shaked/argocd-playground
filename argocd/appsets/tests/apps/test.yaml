apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: tests-apps-test
  namespace: argocd
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  syncPolicy:
    preserveResourcesOnDeletion: true
  generators:
    - matrix:
        generators:
          - git:
              repoURL: https://github.com/Shaked/argocd-playground
              revision: main
              files:
                - path: argocd/appsets/tests/apps/cluster-labels/**/argo.yaml
              values:
                product: "{{ index .path.segments 5 }}"
                packageName: "{{ index .path.segments 6 }}"
                environment: "{{ index .path.segments 7 }}"
                appsetName: "tests-apps-test"
          - clusters:
              selector:
                matchLabels:
                  argocd.argoproj.io/secret-type: cluster
                  environment: "{{ .values.environment }}"
                  product-{{ .values.product }}: '{{ dig "enabled" (true) . }}'
  template:
    metadata:
      name: "tests-apps-test-{{ .values.environment }}-{{ .name }}-{{ .values.product }}-{{ .values.packageName }}"
      annotations:
        # See: https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/#manifest-paths-annotation
        argocd.argoproj.io/manifest-generate-paths: .
      labels:
        product: "{{ .values.product }}"
        package-name: "{{ .values.packageName }}"
        environment: "{{ .values.environment }}"
        region: '{{ index .metadata.labels "region" }}'
        appset-name: "{{ .values.appsetName }}"
    spec:
      project: "tests-apps"
      sources:
        - repoURL: "{{ .chartRepoUrl }}"
          targetRevision: "{{ .chartVersion }}"
          path: "charts/apps/{{ .values.product }}/{{ .values.packageName }}"
          helm:
            releaseName: '{{ dig "releaseName" (printf "%s-%s" (.values.product) (.values.packageName)) . }}'
            ignoreMissingValueFiles: true
            valueFiles:
              - "$values/values/tests/apps/{{ .values.product }}/{{ .values.packageName }}/values.yaml"
              - "$values/values/tests/apps/{{ .values.product }}/{{ .values.packageName }}/{{ .values.environment }}/values.yaml"
              - '$values/values/tests/apps/{{ .values.product }}/{{ .values.packageName }}/{{ .values.environment }}/{{ index .metadata.labels "region" }}/values.yaml'
              - '$values/values/tests/apps/{{ .values.product }}/{{ .values.packageName }}/{{ .values.environment }}/{{ index .metadata.labels "region" }}/{{ .name }}/values.yaml'
        - repoURL: '{{ dig "valuesVersion" (printf "%s" (.chartRepoUrl)) . }}'
          targetRevision: '{{ dig "valuesVersion" "main" . }}'
          ref: values
      destination:
        server: "{{ .server }}"
        namespace: '{{ dig "namespace" (printf "%s" (.values.product)) . }}'
  templatePatch: |
    spec:
      syncPolicy:
        syncOptions:
        - CreateNamespace=true
        - PrunePropagationPolicy=orphan
    {{- if or (not (hasKey . "autoSync")) (and (hasKey . "autoSync") (hasKey .autoSync "enabled") .autoSync.enabled) }}
        automated:
          prune: {{ dig "autoSync" "prune" "false" . }}
          selfHeal: {{ dig "autoSync" "selfHeal" "false" . }}
    {{- end }}
    #   For disabling autosync as default
    #   if and (hasKey . "autoSync") (hasKey .autoSync "enabled")
    #   if .autoSync.enabled
    #   end
